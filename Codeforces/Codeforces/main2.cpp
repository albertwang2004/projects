/*#include <bits/stdc++.h>
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define p push
#define ins insert
#define t top
#define fr front

#define T1 10
#define T2 100
#define T3 1000
#define T4 10000
#define T5 100000
#define T6 1000000

#define H1 11
#define H2 105
#define H3 1010
#define H4 10010
#define H5 100010
#define H6 1000010

#define H 2*H5
#define HH 10

#define mod 998244353
#define MOD 1000000007
#define INF 1069999999
#define lnf 0
#define LNF 1e18

using namespace std;
mt19937 mr(time(0));
typedef long long int ll;
struct LL {

    static const ll m = mod; // set to LNF for nomod
    long long int val;

    LL(ll v) {val=reduce(v);};
    LL() {val=0;};
    ~LL(){};
    LL(const LL& l) {val=l.val;};
    LL& operator=(int l) {val=l; return *this;}
    LL& operator=(ll l) {val=l; return *this;}
    LL& operator=(LL l) {val=l.val; return *this;}

    static long long int reduce(ll x, ll md = m) {
        x %= md;
        while (x >= md) x-=md;
        while (x < 0) x+=md;
        return x;
    }

    bool operator<(const LL& b) { return val<b.val; }
    bool operator<=(const LL& b) { return val<=b.val; }
    bool operator==(const LL& b) { return val==b.val; }
    bool operator>=(const LL& b) { return val>=b.val; }
    bool operator>(const LL& b) { return val>b.val; }

    LL operator+(const LL& b) { return LL(val+b.val); }
    LL operator+(const ll& b) { return (*this+LL(b)); }
    LL& operator+=(const LL& b) { return (*this=*this+b); }
    LL& operator+=(const ll& b) { return (*this=*this+b); }

    LL operator-(const LL& b) { return LL(val-b.val); }
    LL operator-(const ll& b) { return (*this-LL(b)); }
    LL& operator-=(const LL& b) { return (*this=*this-b); }
    LL& operator-=(const ll& b) { return (*this=*this-b); }

    LL operator*(const LL& b) { return LL(val*b.val); }
    LL operator*(const ll& b) { return (*this*LL(b)); }
    LL& operator*=(const LL& b) { return (*this=*this*b); }
    LL& operator*=(const ll& b) { return (*this=*this*b); }

    static LL exp(const LL& x, const ll& y){
        ll z = y;
        z = reduce(z,m-1);
        LL ret = 1;
        LL w = x;
        while (z) {
            if (z&1) ret *= w;
            z >>= 1; w *= w;
        }
        return ret;
    }
    LL& operator^=(ll y) { return (*this=LL(val^y)); }

    LL operator/(const LL& b) { return ((*this)*exp(b,-1)); }
    LL operator/(const ll& b) { return (*this/LL(b)); }
    LL operator/=(const LL& b) { return ((*this)*=exp(b,-1)); }
    LL& operator/=(const ll& b) { return (*this=*this/LL(b)); }

}; ostream& operator<<(ostream& os, const LL& obj) { return os << obj.val; }
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef pair<LL,LL> pLL;
typedef pair<pll,ll> tri;

int T,N,M,K,Q;

ll rd() {ll x; scanf("%lld",&x); return x;}
void fl() {cout.flush();}

// bash a restricted position.

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<2,0<<0,1<<3,1<<4,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<5,0<<0,1<<6,1<<7,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<8,0<<0,1<<9,1<<10,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<11,0<<0,0<<0,1<<12,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<0,1<<1,1<<2,1<<3,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,-1<<0,-1<<0,-1<<0,1<<4,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<5,1<<6,-1<<0,-1<<0,1<<7,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<8,1<<9,1<<10,1<<11,1<<12,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,-1<<0,-1<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<2,1<<3,-1<<0,-1<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<4,1<<5,-1<<0,1<<6,1<<7,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<8,1<<9,-1<<0,-1<<0,1<<10,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,1<<2,1<<3,1<<4,1<<5,1<<6,0<<0},
    {0<<0,0<<0,1<<7,-1<<0,-1<<0,-1<<0,-1<<0,-1<<0,1<<8,0<<0},
    {0<<0,0<<0,1<<9,1<<10,1<<11,1<<12,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,1<<2,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<3,-1<<0,1<<4,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<5,-1<<0,-1<<0,-1<<0,1<<6,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<7,-1<<0,1<<8,1<<9,1<<10,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<11,1<<12,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,1<<2,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<3,1<<4,-1<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<5,1<<6,-1<<0,1<<7,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<8,1<<9,-1<<0,1<<10,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<11,-1<<0,-1<<0,1<<12,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,1<<0,1<<1,1<<2,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,1<<3,-1<<0,1<<4,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<5,1<<6,1<<7,-1<<0,1<<8,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<9,-1<<0,-1<<0,-1<<0,1<<10,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,1<<11,1<<12,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<0,1<<1,1<<2,1<<3,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<4,1<<5,-1<<0,1<<6,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<7,1<<8,-1<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<9,0<<0,-1<<0,1<<10,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<11,-1<<0,-1<<0,1<<12,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<0,1<<1,1<<2,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<3,0<<0,-1<<0,1<<4,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<5,1<<6,-1<<0,1<<7,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<8,1<<9,-1<<0,1<<10,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,1<<11,-1<<0,-1<<0,1<<12,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,1<<0,1<<1,1<<2,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,1<<3,-1<<0,1<<4,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<5,1<<6,1<<7,-1<<0,1<<8,0<<0,0<<0},
    {0<<0,0<<0,0<<0,1<<9,-1<<0,-1<<0,-1<<0,1<<10,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,1<<11,1<<12,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*/

/*
int hsh[HH][HH] = {
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,-1<<0,-1<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
    {0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0,0<<0},
};
*//*

bool temp[HH][HH];
bool good[HH][HH];
bool DP[H];
int win[H];

void disp(int h) {
    for (int i = 0; i < 8; i++) {
        for (int j = 0; j < 8; j++) {

        }
    }
}

void upd(int h, bool de) {
    win[h] = -1;
    for (int i = 0; i < HH; i++) {
        for (int j = 0; j < HH; j++) {
            if (hsh[i][j]==-1){
                temp[i][j]=0;
                good[i][j]=1;
            } else if (hsh[i][j]==0) {
                temp[i][j]=0;
                good[i][j]=0;
            } else if (h&hsh[i][j]) {
                temp[i][j]=1;
                good[i][j]=0;
            } else {
                temp[i][j]=0;
                good[i][j]=1;
            }
            if(de) cout << good[i][j];
        }
        if(de) cout << endl;
    }
    bool sec = true;
    // do vertical moves
    for (int i = 1; i < HH-1; i++) {
        for (int j = 1; j < HH-1; j++) {
            for (int k = 1; k < 4; k++) {
                if (i+k<HH) {
                    bool flag = true;
                    int re = 0;
                    for (int m = 0; m < k; m++) {
                        if (!temp[i+m][j]) flag = false;
                        re^=hsh[i+m][j];
                    }
                    bool te = false;
                    for (int m = 0; m < k; m++) {
                        te = te || good[i+m][j-1];
                        te = te || good[i+m][j+1];
                    }
                    te = te || good[i-1][j];
                    te = te || good[i+k][j];
                    flag = flag && te;
                    if (flag) {
                        if (DP[h^re]) {
                            sec = false;
                            win[h] = re;
                        }
                    }
                }
            }
        }
    }
    // do horizontal moves
    for (int i = 1; i < HH-1; i++) {
        for (int j = 1; j < HH-1; j++) {
            for (int k = 1; k < 4; k++) {
                if (j+k<HH) {
                    bool flag = true;
                    int re = 0;
                    for (int m = 0; m < k; m++) {
                        if (!temp[i][j+m]) flag = false;
                        re^=hsh[i][j+m];
                    }
                    bool te = false;
                    for (int m = 0; m < k; m++) {
                        te = te || good[i-1][j+m];
                        te = te || good[i+1][j+m];
                    }
                    if (!te) flag = false;
                    te = te || good[i][j-1];
                    te = te || good[i][j+k];
                    flag = flag && te;
                    if (flag) {
                        if (DP[h^re]) {
                            sec = false;
                            win[h] = re;
                        }
                    }
                }
            }
        }
    }

    DP[h] = sec;
}

int main() {

    int ret = 0;
    for (int i = 0; i < HH; i++) {
        for (int j = 0; j < HH; j++) {
            if (hsh[i][j]>=0) ret += hsh[i][j];
        }
    }
    bool trials = 0;

    if (trials) T=rd();
    else T=1;

    DP[0] = 1;
    for (int i = 0; i < H; i++) {
        upd(i,0);
    }
    ret -= 0
        + 8+32 // THEIRS
        + 0;
    upd(ret,1);

    cout << win[ret] << endl;

    int c = 0;
    for (int i = 0; i < HH; i++) {
        for (int j = 0; j < HH; j++) {
            if (hsh[i][j]==-1) cout << 'x';
            else if (win[ret]&hsh[i][j]) {cout << '*';c++;}
            else if (ret&hsh[i][j]) {cout << c%10;c++;}
            else if (hsh[i][j]) {cout << 'x';c++;}
            else cout << '.';
        }
        cout << endl;
    }
    ret-=win[ret];

    return 0;

}
*/
